import { defineComponent as $, openBlock as P, createBlock as E, resolveDynamicComponent as j, normalizeProps as S, guardReactiveProps as x, ref as C, onMounted as O } from "vue";
let v = !1;
const b = [], A = (o) => new Promise((e, t) => {
  if (typeof window > "u" || (window.storyblokRegisterEvent = (r) => {
    if (window.location === window.parent.location) {
      console.warn("You are not in Draft Mode or in the Visual Editor.");
      return;
    }
    v ? r() : b.push(r);
  }, document.getElementById("storyblok-javascript-bridge")))
    return;
  const s = document.createElement("script");
  s.async = !0, s.src = o, s.id = "storyblok-javascript-bridge", s.onerror = (r) => t(r), s.onload = (r) => {
    b.forEach((i) => i()), v = !0, e(r);
  }, document.getElementsByTagName("head")[0].appendChild(s);
});
var I = Object.defineProperty, M = (o, e, t) => e in o ? I(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : o[e] = t, h = (o, e, t) => (M(o, typeof e != "symbol" ? e + "" : e, t), t);
function w(o) {
  return !(o !== o || o === 1 / 0 || o === -1 / 0);
}
function N(o, e, t) {
  if (!w(e))
    throw new TypeError("Expected `limit` to be a finite number");
  if (!w(t))
    throw new TypeError("Expected `interval` to be a finite number");
  const s = [];
  let r = [], i = 0;
  const n = function() {
    i++;
    const l = setTimeout(function() {
      i--, s.length > 0 && n(), r = r.filter(function(u) {
        return u !== l;
      });
    }, t);
    r.indexOf(l) < 0 && r.push(l);
    const c = s.shift();
    c.resolve(o.apply(c.self, c.args));
  }, a = function(...l) {
    const c = this;
    return new Promise(function(u, p) {
      s.push({
        resolve: u,
        reject: p,
        args: l,
        self: c
      }), i < e && n();
    });
  };
  return a.abort = function() {
    r.forEach(clearTimeout), r = [], s.forEach(function(l) {
      l.reject(function() {
        Error.call(this, "Throttled function aborted"), this.name = "AbortError";
      });
    }), s.length = 0;
  }, a;
}
const L = function(o, e) {
  const t = {};
  for (const s in o) {
    const r = o[s];
    e.indexOf(s) > -1 && r !== null && (t[s] = r);
  }
  return t;
}, U = (o) => o === "email", H = () => ({
  singleTag: "hr"
}), q = () => ({
  tag: "blockquote"
}), D = () => ({
  tag: "ul"
}), B = (o) => ({
  tag: [
    "pre",
    {
      tag: "code",
      attrs: o.attrs
    }
  ]
}), V = () => ({
  singleTag: "br"
}), z = (o) => ({
  tag: `h${o.attrs.level}`
}), J = (o) => ({
  singleTag: [
    {
      tag: "img",
      attrs: L(o.attrs, ["src", "alt", "title"])
    }
  ]
}), F = () => ({
  tag: "li"
}), Y = () => ({
  tag: "ol"
}), K = () => ({
  tag: "p"
}), G = () => ({
  tag: "b"
}), Q = () => ({
  tag: "strike"
}), W = () => ({
  tag: "u"
}), X = () => ({
  tag: "strong"
}), Z = () => ({
  tag: "code"
}), ee = () => ({
  tag: "i"
}), te = (o) => {
  const e = { ...o.attrs }, { linktype: t = "url" } = o.attrs;
  return U(t) && (e.href = `mailto:${e.href}`), e.anchor && (e.href = `${e.href}#${e.anchor}`, delete e.anchor), {
    tag: [
      {
        tag: "a",
        attrs: e
      }
    ]
  };
}, se = (o) => ({
  tag: [
    {
      tag: "span",
      attrs: o.attrs
    }
  ]
}), re = {
  nodes: {
    horizontal_rule: H,
    blockquote: q,
    bullet_list: D,
    code_block: B,
    hard_break: V,
    heading: z,
    image: J,
    list_item: F,
    ordered_list: Y,
    paragraph: K
  },
  marks: {
    bold: G,
    strike: Q,
    underline: W,
    strong: X,
    code: Z,
    italic: ee,
    link: te,
    styled: se
  }
}, oe = function(o) {
  const e = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  }, t = /[&<>"']/g, s = RegExp(t.source);
  return o && s.test(o) ? o.replace(t, (r) => e[r]) : o;
};
class m {
  constructor(e) {
    h(this, "marks"), h(this, "nodes"), e || (e = re), this.marks = e.marks || [], this.nodes = e.nodes || [];
  }
  addNode(e, t) {
    this.nodes[e] = t;
  }
  addMark(e, t) {
    this.marks[e] = t;
  }
  render(e) {
    if (e && e.content && Array.isArray(e.content)) {
      let t = "";
      return e.content.forEach((s) => {
        t += this.renderNode(s);
      }), t;
    }
    return console.warn(
      "The render method must receive an object with a content field, which is an array"
    ), "";
  }
  renderNode(e) {
    const t = [];
    e.marks && e.marks.forEach((r) => {
      const i = this.getMatchingMark(r);
      i && t.push(this.renderOpeningTag(i.tag));
    });
    const s = this.getMatchingNode(e);
    return s && s.tag && t.push(this.renderOpeningTag(s.tag)), e.content ? e.content.forEach((r) => {
      t.push(this.renderNode(r));
    }) : e.text ? t.push(oe(e.text)) : s && s.singleTag ? t.push(this.renderTag(s.singleTag, " /")) : s && s.html && t.push(s.html), s && s.tag && t.push(this.renderClosingTag(s.tag)), e.marks && e.marks.slice(0).reverse().forEach((r) => {
      const i = this.getMatchingMark(r);
      i && t.push(this.renderClosingTag(i.tag));
    }), t.join("");
  }
  renderTag(e, t) {
    return e.constructor === String ? `<${e}${t}>` : e.map((s) => {
      if (s.constructor === String)
        return `<${s}${t}>`;
      {
        let r = `<${s.tag}`;
        if (s.attrs)
          for (const i in s.attrs) {
            const n = s.attrs[i];
            n !== null && (r += ` ${i}="${n}"`);
          }
        return `${r}${t}>`;
      }
    }).join("");
  }
  renderOpeningTag(e) {
    return this.renderTag(e, "");
  }
  renderClosingTag(e) {
    return e.constructor === String ? `</${e}>` : e.slice(0).reverse().map((t) => t.constructor === String ? `</${t}>` : `</${t.tag}>`).join("");
  }
  getMatchingNode(e) {
    const t = this.nodes[e.type];
    if (typeof t == "function")
      return t(e);
  }
  getMatchingMark(e) {
    const t = this.marks[e.type];
    if (typeof t == "function")
      return t(e);
  }
}
class _ {
  constructor() {
    h(this, "isCDNUrl", (e = "") => e.indexOf("/cdn/") > -1), h(this, "getOptionsPage", (e, t = 25, s = 1) => ({
      ...e,
      per_page: t,
      page: s
    })), h(this, "delay", (e) => new Promise((t) => setTimeout(t, e))), h(this, "arrayFrom", (e = 0, t) => [...Array(e)].map(t)), h(this, "range", (e = 0, t = e) => {
      const s = Math.abs(t - e) || 0, r = e < t ? 1 : -1;
      return this.arrayFrom(s, (i, n) => n * r + e);
    }), h(this, "asyncMap", async (e, t) => Promise.all(e.map(t))), h(this, "flatMap", (e = [], t) => e.map(t).reduce((s, r) => [...s, ...r], []));
  }
  stringify(e, t, s) {
    const r = [];
    for (const i in e) {
      if (!Object.prototype.hasOwnProperty.call(e, i))
        continue;
      const n = e[i], a = s ? "" : encodeURIComponent(i);
      let l;
      typeof n == "object" ? l = this.stringify(
        n,
        t ? t + encodeURIComponent("[" + a + "]") : a,
        Array.isArray(n)
      ) : l = (t ? t + encodeURIComponent("[" + a + "]") : a) + "=" + encodeURIComponent(n), r.push(l);
    }
    return r.join("&");
  }
}
class ie {
  constructor(e) {
    h(this, "baseURL"), h(this, "timeout"), h(this, "headers"), h(this, "responseInterceptor"), h(this, "fetch"), h(this, "ejectInterceptor"), h(this, "url"), h(this, "parameters"), this.baseURL = e.baseURL, this.headers = e.headers || [], this.timeout = e != null && e.timeout ? e.timeout * 1e3 : 0, this.responseInterceptor = e.responseInterceptor, this.fetch = (...t) => e.fetch ? e.fetch(...t) : fetch(...t), this.ejectInterceptor = !1, this.url = "", this.parameters = {};
  }
  get(e, t) {
    return this.url = e, this.parameters = t, this._methodHandler("get");
  }
  post(e, t) {
    return this.url = e, this.parameters = t, this._methodHandler("post");
  }
  put(e, t) {
    return this.url = e, this.parameters = t, this._methodHandler("put");
  }
  delete(e, t) {
    return this.url = e, this.parameters = t, this._methodHandler("delete");
  }
  async _responseHandler(e) {
    const t = [], s = {
      data: {},
      headers: {},
      status: 0,
      statusText: ""
    };
    e.status !== 204 && await e.json().then((r) => {
      s.data = r;
    });
    for (const r of e.headers.entries())
      t[r[0]] = r[1];
    return s.headers = { ...t }, s.status = e.status, s.statusText = e.statusText, s;
  }
  async _methodHandler(e) {
    let t = `${this.baseURL}${this.url}`, s = null;
    if (e === "get") {
      const l = new _();
      t = `${this.baseURL}${this.url}?${l.stringify(
        this.parameters
      )}`;
    } else
      s = JSON.stringify(this.parameters);
    const r = new URL(t), i = new AbortController(), { signal: n } = i;
    let a;
    this.timeout && (a = setTimeout(() => i.abort(), this.timeout));
    try {
      const l = await this.fetch(`${r}`, {
        method: e,
        headers: this.headers,
        body: s,
        signal: n
      });
      this.timeout && clearTimeout(a);
      const c = await this._responseHandler(l);
      return this.responseInterceptor && !this.ejectInterceptor ? this._statusHandler(this.responseInterceptor(c)) : this._statusHandler(c);
    } catch (l) {
      return {
        message: l
      };
    }
  }
  eject() {
    this.ejectInterceptor = !0;
  }
  _statusHandler(e) {
    const t = /20[0-6]/g;
    return new Promise((s, r) => {
      if (t.test(`${e.status}`))
        return s(e);
      const i = {
        message: new Error(e.statusText),
        status: e.status,
        response: e.data.error || e.data.slug
      };
      r(i);
    });
  }
}
let f = {};
const d = {};
class ne {
  constructor(e, t) {
    if (h(this, "client"), h(this, "maxRetries"), h(this, "throttle"), h(this, "accessToken"), h(this, "cache"), h(this, "helpers"), h(this, "relations"), h(this, "links"), h(this, "richTextResolver"), h(this, "resolveNestedRelations"), !t) {
      const i = e.region ? `-${e.region}` : "", n = e.https === !1 ? "http" : "https";
      e.oauthToken ? t = `${n}://api${i}.storyblok.com/v1` : t = `${n}://api${i}.storyblok.com/v2`;
    }
    const s = new Headers();
    s.set("Content-Type", "application/json"), s.set("Accept", "application/json"), s.forEach((i, n) => {
      e.headers && e.headers[n] && s.set(n, e.headers[n]);
    });
    let r = 5;
    e.oauthToken && (s.set("Authorization", e.oauthToken), r = 3), e.rateLimit && (r = e.rateLimit), e.richTextSchema ? this.richTextResolver = new m(e.richTextSchema) : this.richTextResolver = new m(), e.componentResolver && this.setComponentResolver(e.componentResolver), this.maxRetries = e.maxRetries, this.throttle = N(this.throttledRequest, r, 1e3), this.accessToken = e.accessToken || "", this.relations = {}, this.links = {}, this.cache = e.cache || { clear: "manual" }, this.helpers = new _(), this.resolveNestedRelations = !1, this.client = new ie({
      baseURL: t,
      timeout: e.timeout || 0,
      headers: s,
      responseInterceptor: e.responseInterceptor,
      fetch: e.fetch
    });
  }
  setComponentResolver(e) {
    this.richTextResolver.addNode("blok", (t) => {
      let s = "";
      return t.attrs.body.forEach((r) => {
        s += e(r.component, r);
      }), {
        html: s
      };
    });
  }
  parseParams(e) {
    return e.version || (e.version = "published"), e.token || (e.token = this.getToken()), e.cv || (e.cv = d[e.token]), Array.isArray(e.resolve_relations) && (e.resolve_relations = e.resolve_relations.join(",")), e;
  }
  factoryParamOptions(e, t) {
    return this.helpers.isCDNUrl(e) ? this.parseParams(t) : t;
  }
  makeRequest(e, t, s, r) {
    const i = this.factoryParamOptions(
      e,
      this.helpers.getOptionsPage(t, s, r)
    );
    return this.cacheResponse(e, i);
  }
  get(e, t) {
    t || (t = {});
    const s = `/${e}`, r = this.factoryParamOptions(s, t);
    return this.cacheResponse(s, r);
  }
  async getAll(e, t, s) {
    const r = (t == null ? void 0 : t.per_page) || 25, i = `/${e}`, n = i.split("/"), a = s || n[n.length - 1], l = 1, c = await this.makeRequest(i, t, r, l), u = c.total ? Math.ceil(c.total / r) : 1, p = await this.helpers.asyncMap(
      this.helpers.range(l, u),
      (y) => this.makeRequest(i, t, r, y + 1)
    );
    return this.helpers.flatMap(
      [c, ...p],
      (y) => Object.values(y.data[a])
    );
  }
  post(e, t) {
    const s = `/${e}`;
    return Promise.resolve(this.throttle("post", s, t));
  }
  put(e, t) {
    const s = `/${e}`;
    return Promise.resolve(this.throttle("put", s, t));
  }
  delete(e, t) {
    const s = `/${e}`;
    return Promise.resolve(this.throttle("delete", s, t));
  }
  getStories(e) {
    return this.get("cdn/stories", e);
  }
  getStory(e, t) {
    return this.get(`cdn/stories/${e}`, t);
  }
  getToken() {
    return this.accessToken;
  }
  ejectInterceptor() {
    this.client.eject();
  }
  _cleanCopy(e) {
    return JSON.parse(JSON.stringify(e));
  }
  _insertLinks(e, t) {
    const s = e[t];
    s && s.fieldtype == "multilink" && s.linktype == "story" && typeof s.id == "string" && this.links[s.id] ? s.story = this._cleanCopy(this.links[s.id]) : s && s.linktype === "story" && typeof s.uuid == "string" && this.links[s.uuid] && (s.story = this._cleanCopy(this.links[s.uuid]));
  }
  _insertRelations(e, t, s) {
    if (s.indexOf(`${e.component}.${t}`) > -1) {
      if (typeof e[t] == "string")
        this.relations[e[t]] && (e[t] = this._cleanCopy(this.relations[e[t]]));
      else if (e[t] && e[t].constructor === Array) {
        const r = [];
        e[t].forEach((i) => {
          this.relations[i] && r.push(this._cleanCopy(this.relations[i]));
        }), e[t] = r;
      }
    }
  }
  iterateTree(e, t) {
    const s = (r) => {
      if (r != null) {
        if (r.constructor === Array)
          for (let i = 0; i < r.length; i++)
            s(r[i]);
        else if (r.constructor === Object) {
          if (r._stopResolving)
            return;
          for (const i in r)
            (r.component && r._uid || r.type === "link") && (this._insertRelations(
              r,
              i,
              t
            ), this._insertLinks(r, i)), s(r[i]);
        }
      }
    };
    s(e.content);
  }
  async resolveLinks(e, t) {
    let s = [];
    if (e.link_uuids) {
      const r = e.link_uuids.length, i = [], n = 50;
      for (let a = 0; a < r; a += n) {
        const l = Math.min(r, a + n);
        i.push(e.link_uuids.slice(a, l));
      }
      for (let a = 0; a < i.length; a++)
        (await this.getStories({
          per_page: n,
          language: t.language,
          version: t.version,
          by_uuids: i[a].join(",")
        })).data.stories.forEach(
          (l) => {
            s.push(l);
          }
        );
    } else
      s = e.links;
    s.forEach((r) => {
      this.links[r.uuid] = { ...r, _stopResolving: !0 };
    });
  }
  async resolveRelations(e, t) {
    let s = [];
    if (e.rel_uuids) {
      const r = e.rel_uuids.length, i = [], n = 50;
      for (let a = 0; a < r; a += n) {
        const l = Math.min(r, a + n);
        i.push(e.rel_uuids.slice(a, l));
      }
      for (let a = 0; a < i.length; a++)
        (await this.getStories({
          per_page: n,
          language: t.language,
          version: t.version,
          by_uuids: i[a].join(",")
        })).data.stories.forEach((l) => {
          s.push(l);
        });
    } else
      s = e.rels;
    s && s.length > 0 && s.forEach((r) => {
      this.relations[r.uuid] = { ...r, _stopResolving: !0 };
    });
  }
  async resolveStories(e, t) {
    var s, r;
    let i = [];
    if (typeof t.resolve_relations < "u" && t.resolve_relations.length > 0 && (typeof t.resolve_relations == "string" && (i = t.resolve_relations.split(",")), await this.resolveRelations(e, t)), t.resolve_links && ["1", "story", "url"].indexOf(t.resolve_links) > -1 && ((s = e.links) != null && s.length || (r = e.link_uuids) != null && r.length) && await this.resolveLinks(e, t), this.resolveNestedRelations)
      for (const n in this.relations)
        this.iterateTree(this.relations[n], i);
    e.story ? this.iterateTree(e.story, i) : e.stories.forEach((n) => {
      this.iterateTree(n, i);
    });
  }
  async cacheResponse(e, t, s) {
    const r = this.helpers.stringify({ url: e, params: t }), i = this.cacheProvider();
    if (this.cache.clear === "auto" && t.version === "draft" && await this.flushCache(), t.version === "published" && e != "/cdn/spaces/me") {
      const n = await i.get(r);
      if (n)
        return Promise.resolve(n);
    }
    return new Promise((n, a) => {
      try {
        (async () => {
          var l;
          try {
            const c = await this.throttle("get", e, t);
            let u = { data: c.data, headers: c.headers };
            return (l = c.headers) != null && l["per-page"] && (u = Object.assign({}, u, {
              perPage: c.headers["per-page"] ? parseInt(c.headers["per-page"]) : 0,
              total: c.headers["per-page"] ? parseInt(c.headers.total) : 0
            })), c.status != 200 ? a(c) : ((u.data.story || u.data.stories) && await this.resolveStories(u.data, t), t.version === "published" && e != "/cdn/spaces/me" && await i.set(r, u), u.data.cv && t.token && (t.version == "draft" && d[t.token] != u.data.cv && await this.flushCache(), d[t.token] = u.data.cv), n(u));
          } catch (c) {
            return a(c);
          }
        })();
      } catch {
      }
    });
  }
  throttledRequest(e, t, s) {
    return this.client[e](t, s);
  }
  cacheVersions() {
    return d;
  }
  cacheVersion() {
    return d[this.accessToken];
  }
  setCacheVersion(e) {
    this.accessToken && (d[this.accessToken] = e);
  }
  cacheProvider() {
    switch (this.cache.type) {
      case "memory":
        return {
          get(e) {
            return Promise.resolve(f[e]);
          },
          getAll() {
            return Promise.resolve(f);
          },
          set(e, t) {
            return f[e] = t, Promise.resolve(void 0);
          },
          flush() {
            return f = {}, Promise.resolve(void 0);
          }
        };
      case "custom":
        if (this.cache.custom)
          return this.cache.custom;
      default:
        return {
          get() {
            return Promise.resolve(void 0);
          },
          getAll() {
            return Promise.resolve(void 0);
          },
          set() {
            return Promise.resolve(void 0);
          },
          flush() {
            return Promise.resolve(void 0);
          }
        };
    }
  }
  async flushCache() {
    return await this.cacheProvider().flush(), this;
  }
}
const ge = (o = {}) => {
  const { apiOptions: e } = o;
  if (!e.accessToken) {
    console.error(
      "You need to provide an access token to interact with Storyblok API. Read https://www.storyblok.com/docs/api/content-delivery#topics/authentication"
    );
    return;
  }
  return { storyblokApi: new ne(e) };
}, ae = (o) => {
  if (typeof o != "object" || typeof o._editable > "u")
    return {};
  const e = JSON.parse(
    o._editable.replace(/^<!--#storyblok#/, "").replace(/-->$/, "")
  );
  return {
    "data-blok-c": JSON.stringify(e),
    "data-blok-uid": e.id + "-" + e.uid
  };
};
let k;
const le = "https://app.storyblok.com/f/storyblok-v2-latest.js", ce = (o, e, t = {}) => {
  var s;
  const r = !(typeof window > "u") && typeof window.storyblokRegisterEvent < "u", i = +new URL((s = window.location) == null ? void 0 : s.href).searchParams.get(
    "_storyblok"
  ) === o;
  if (!(!r || !i)) {
    if (!o) {
      console.warn("Story ID is not defined. Please provide a valid ID.");
      return;
    }
    window.storyblokRegisterEvent(() => {
      new window.StoryblokBridge(t).on(["input", "published", "change"], (n) => {
        n.action === "input" && n.story.id === o ? e(n.story) : (n.action === "change" || n.action === "published") && n.storyId === o && window.location.reload();
      });
    });
  }
}, he = (o = {}) => {
  var e, t;
  const {
    bridge: s,
    accessToken: r,
    use: i = [],
    apiOptions: n = {},
    richText: a = {}
  } = o;
  n.accessToken = n.accessToken || r;
  const l = { bridge: s, apiOptions: n };
  let c = {};
  i.forEach((p) => {
    c = { ...c, ...p(l) };
  });
  const u = !(typeof window > "u") && ((t = (e = window.location) == null ? void 0 : e.search) == null ? void 0 : t.includes("_storyblok_tk"));
  return s !== !1 && u && A(le), k = new m(a.schema), a.resolver && T(k, a.resolver), c;
}, T = (o, e) => {
  o.addNode("blok", (t) => {
    let s = "";
    return t.attrs.body.forEach((r) => {
      s += e(r.component, r);
    }), {
      html: s
    };
  });
}, fe = (o, e, t) => {
  let s = t || k;
  if (!s) {
    console.error(
      "Please initialize the Storyblok SDK before calling the renderRichText function"
    );
    return;
  }
  return o === "" ? "" : o ? (e && (s = new m(e.schema), e.resolver && T(s, e.resolver)), s.render(o)) : (console.warn(`${o} is not a valid Richtext object. This might be because the value of the richtext field is empty.
    
  For more info about the richtext object check https://github.com/storyblok/storyblok-js#rendering-rich-text`), "");
}, ue = /* @__PURE__ */ $({
  __name: "StoryblokComponent",
  props: {
    blok: null
  },
  setup(o) {
    return (e, t) => (P(), E(j(o.blok.component), S(x({ ...e.$props, ...e.$attrs })), null, 16));
  }
}), de = {
  beforeMount(o, e) {
    if (e.value) {
      const t = ae(e.value);
      o.setAttribute("data-blok-c", t["data-blok-c"]), o.setAttribute("data-blok-uid", t["data-blok-uid"]), o.classList.add("storyblok__outline");
    }
  }
}, R = (o) => {
  console.error(`You can't use ${o} if you're not loading apiPlugin. Please provide it on StoryblokVue initialization.
    `);
};
let g = null;
const me = () => (g || R("useStoryblokApi"), g), ye = async (o, e = {}, t = {}) => {
  const s = C(null);
  if (O(() => {
    s.value && s.value.id && ce(
      s.value.id,
      (r) => s.value = r,
      t
    );
  }), g) {
    const { data: r } = await g.get(
      `cdn/stories/${o}`,
      e
    );
    s.value = r.story;
  } else
    R("useStoryblok");
  return s;
}, ke = {
  install(o, e = {}) {
    o.directive("editable", de), o.component("StoryblokComponent", ue);
    const { storyblokApi: t } = he(e);
    g = t;
  }
};
export {
  m as RichTextResolver,
  re as RichTextSchema,
  ue as StoryblokComponent,
  ke as StoryblokVue,
  ge as apiPlugin,
  fe as renderRichText,
  ye as useStoryblok,
  me as useStoryblokApi,
  ce as useStoryblokBridge
};
