//#region src/types/index.d.ts

/**
 * Represents text alignment attributes that can be applied to block-level elements.
 */
interface TextAlignmentAttrs {
  textAlign?: 'left' | 'center' | 'right' | 'justify';
}
/**
 * Represents common attributes that can be applied to block-level elements.
 */
interface BlockAttributes extends TextAlignmentAttrs {
  class?: string;
  id?: string;
  [key: string]: any;
}
interface StoryblokRichTextDocumentNode {
  type: string;
  content?: StoryblokRichTextDocumentNode[];
  attrs?: BlockAttributes;
  text?: string;
  marks?: StoryblokRichTextDocumentNode[];
}
//#endregion
//#region src/markdown-parser.d.ts
/**
 * markdown-it Token interface definition
 */
interface MarkdownToken {
  type: string;
  tag: string;
  attrs: Array<[string, string]> | null;
  map: [number, number] | null;
  nesting: 1 | 0 | -1;
  level: number;
  children: MarkdownToken[] | null;
  content: string;
  markup: string;
  info: string;
  meta: any;
  block: boolean;
  hidden: boolean;
  attrGet: (name: string) => string | null;
  attrSet: (name: string, value: string) => void;
  attrPush: (attrData: [string, string]) => void;
  attrJoin: (name: string, value: string) => void;
  attrIndex: (name: string) => number;
}
/**
 * Type for a Markdown element resolver.
 */
type MarkdownNodeResolver = (token: MarkdownToken, children: StoryblokRichTextDocumentNode[] | undefined) => StoryblokRichTextDocumentNode | null;
/**
 * Options for the markdown parser, allowing custom resolvers.
 */
interface MarkdownParserOptions {
  resolvers?: Partial<Record<string, MarkdownNodeResolver>>;
}
/**
 * Supported Markdown token types as constants for maintainability and type safety.
 * @see https://markdown-it.github.io/token-class.html
 */
declare const MarkdownTokenTypes: {
  readonly HEADING: "heading_open";
  readonly PARAGRAPH: "paragraph_open";
  readonly TEXT: "text";
  readonly STRONG: "strong_open";
  readonly EMP: "em_open";
  readonly ORDERED_LIST: "ordered_list_open";
  readonly BULLET_LIST: "bullet_list_open";
  readonly LIST_ITEM: "list_item_open";
  readonly IMAGE: "image";
  readonly BLOCKQUOTE: "blockquote_open";
  readonly CODE_INLINE: "code_inline";
  readonly CODE_BLOCK: "code_block";
  readonly FENCE: "fence";
  readonly LINK: "link_open";
  readonly HR: "hr";
  readonly DEL: "del_open";
  readonly HARD_BREAK: "hardbreak";
  readonly SOFT_BREAK: "softbreak";
  readonly TABLE: "table_open";
  readonly THEAD: "thead_open";
  readonly TBODY: "tbody_open";
  readonly TR: "tr_open";
  readonly TH: "th_open";
  readonly TD: "td_open";
  readonly S: "s_open";
};
type MarkdownTokenType = keyof typeof MarkdownTokenTypes;
/**
 * Converts Markdown string to Storyblok Richtext Document Node using resolvers.
 * @param markdown - The markdown string to convert
 * @param options - Optional custom resolvers
 * @returns StoryblokRichTextDocumentNode
 */
declare function markdownToStoryblokRichtext(markdown: string, options?: MarkdownParserOptions): StoryblokRichTextDocumentNode;
//#endregion
export { MarkdownNodeResolver, MarkdownParserOptions, MarkdownToken, MarkdownTokenType, MarkdownTokenTypes, markdownToStoryblokRichtext };
//# sourceMappingURL=markdown-parser.d.cts.map