{"version":3,"file":"index.js","names":["src: string","options?: boolean | Partial<StoryblokRichTextImageOptimizationOptions>","attrs: Record<string, unknown>","filterParams: string[]","value: number","min: number","max: number","filter: string","filterParams","tag: string","attrs: BlockAttributes","children?: T","options: StoryblokRichTextOptions<T>","styles: string[]","node: StoryblokRichTextNode<T>","imageResolver: StoryblokRichTextNodeResolver<T>","headingResolver: StoryblokRichTextNodeResolver<T>","emojiResolver: StoryblokRichTextNodeResolver<T>","codeBlockResolver: StoryblokRichTextNodeResolver<T>","node: any","textResolver: StoryblokRichTextNodeResolver<T>","text: T","mark: MarkNode<T>","linkResolver: StoryblokRichTextNodeResolver<T>","attributes: Record<string, any>","componentResolver: StoryblokRichTextNodeResolver<T>","tableResolver: StoryblokRichTextNodeResolver<T>","tableRowResolver: StoryblokRichTextNodeResolver<T>","tableCellResolver: StoryblokRichTextNodeResolver<T>","tableHeaderResolver: StoryblokRichTextNodeResolver<T>","context: StoryblokRichTextContext<T>"],"sources":["../src/images-optimization.ts","../src/richtext.ts"],"sourcesContent":["import type { StoryblokRichTextImageOptimizationOptions } from './types';\n\nexport function optimizeImage(src: string, options?: boolean | Partial<StoryblokRichTextImageOptimizationOptions>): { src: string; attrs: Record<string, any> } {\n  if (!options) {\n    return { src, attrs: {} };\n  }\n  let w = 0;\n  let h = 0;\n  const attrs: Record<string, unknown> = {};\n  const filterParams: string[] = [];\n\n  function validateAndPushFilterParam(value: number, min: number, max: number, filter: string, filterParams: string[]) {\n    if (typeof value !== 'number' || value <= min || value >= max) {\n      console.warn(`[StoryblokRichText] - ${filter.charAt(0).toUpperCase() + filter.slice(1)} value must be a number between ${min} and ${max} (inclusive)`);\n    }\n    else {\n      filterParams.push(`${filter}(${value})`);\n    }\n  }\n\n  if (typeof options === 'object') {\n    if (options.width !== undefined) {\n      if (typeof options.width === 'number' && options.width >= 0) {\n        attrs.width = options.width;\n        w = options.width;\n      }\n      else {\n        console.warn('[StoryblokRichText] - Width value must be a number greater than or equal to 0');\n      }\n    }\n    if (options.height !== undefined) {\n      if (typeof options.height === 'number' && options.height >= 0) {\n        attrs.height = options.height;\n        h = options.height;\n      }\n      else {\n        console.warn('[StoryblokRichText] - Height value must be a number greater than or equal to 0');\n      }\n    }\n    if (options.height === 0 && options.width === 0) {\n      delete attrs.width;\n      delete attrs.height;\n      console.warn('[StoryblokRichText] - Width and height values cannot both be 0');\n    }\n    if (options.loading && ['lazy', 'eager'].includes(options.loading)) {\n      attrs.loading = options.loading;\n    }\n    if (options.class) {\n      attrs.class = options.class;\n    }\n\n    if (options.filters) {\n      const { filters } = options || {};\n      const { blur, brightness, fill, format, grayscale, quality, rotate } = filters || {};\n\n      if (blur) {\n        validateAndPushFilterParam(blur, 0, 100, 'blur', filterParams);\n      }\n      if (quality) {\n        validateAndPushFilterParam(quality, 0, 100, 'quality', filterParams);\n      }\n      if (brightness) {\n        validateAndPushFilterParam(brightness, 0, 100, 'brightness', filterParams);\n      }\n      if (fill) {\n        filterParams.push(`fill(${fill})`);\n      }\n      if (grayscale) {\n        filterParams.push(`grayscale()`);\n      }\n      if (rotate && [0, 90, 180, 270].includes(options.filters.rotate || 0)) {\n        filterParams.push(`rotate(${rotate})`);\n      }\n      if (format && ['webp', 'png', 'jpeg'].includes(format)) {\n        filterParams.push(`format(${format})`);\n      }\n    }\n\n    // Construct srcset attribute\n    if (options.srcset) {\n      attrs.srcset = options.srcset.map((entry): string | undefined => {\n        if (typeof entry === 'number') {\n          return `${src}/m/${entry}x0/${filterParams.length > 0 ? `filters:${filterParams.join(':')}` : ''} ${entry}w`;\n        }\n        if (Array.isArray(entry) && entry.length === 2) {\n          const [entryWidth, entryHeight] = entry;\n          return `${src}/m/${entryWidth}x${entryHeight}/${filterParams.length > 0 ? `filters:${filterParams.join(':')}` : ''} ${entryWidth}w`;\n        }\n        else {\n          console.warn('[StoryblokRichText] - srcset entry must be a number or a tuple of two numbers');\n          return undefined;\n        }\n      }).join(', ');\n    }\n\n    // Construct sizes attribute\n    if (options.sizes) {\n      attrs.sizes = options.sizes.join(', ');\n    }\n  }\n\n  // server-side WebP support detection https://www.storyblok.com/docs/image-service/#optimize\n  // https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg/m/\n  let resultSrc = `${src}/m/`;\n  if (w > 0 || h > 0) {\n    resultSrc = `${resultSrc}${w}x${h}/`;\n  }\n  if (filterParams.length > 0) {\n    resultSrc = `${resultSrc}filters:${filterParams.join(':')}`;\n  }\n\n  return {\n    src: resultSrc,\n    attrs,\n  };\n}\n","import { optimizeImage } from './images-optimization';\nimport { BlockTypes, LinkTypes, MarkTypes, TextTypes } from './types';\nimport type { BlockAttributes, MarkNode, StoryblokRichTextContext, StoryblokRichTextNode, StoryblokRichTextNodeResolver, StoryblokRichTextNodeTypes, StoryblokRichTextOptions, TextNode } from './types';\nimport { attrsToString, attrsToStyle, cleanObject, escapeHtml, SELF_CLOSING_TAGS } from './utils';\n\n/**\n * Default render function that creates an HTML string for a given tag, attributes, and children.\n *\n * @template T\n * @param {string} tag\n * @param {BlockAttributes} [attrs]\n * @param {T} children\n * @return {*}  {T}\n */\nfunction defaultRenderFn<T = string | null>(tag: string, attrs: BlockAttributes = {}, children?: T): T {\n  const attrsString = attrsToString(attrs);\n  const tagString = attrsString ? `${tag} ${attrsString}` : tag;\n  const content = Array.isArray(children) ? children.join('') : children || '';\n\n  if (!tag) {\n    return content as unknown as T;\n  }\n  else if (SELF_CLOSING_TAGS.includes(tag)) {\n    return `<${tagString}>` as unknown as T;\n  }\n  return `<${tagString}>${content}</${tag}>` as unknown as T;\n}\n\n/**\n * Creates a rich text resolver with the given options.\n *\n * @export\n * @template T\n * @param {StoryblokRichTextOptions<T>} [options]\n * @return {*}\n */\nexport function richTextResolver<T>(options: StoryblokRichTextOptions<T> = {}) {\n  const keyCounters = new Map<string, number>();\n\n  const {\n    renderFn = defaultRenderFn,\n    textFn = escapeHtml,\n    resolvers = {},\n    optimizeImages = false,\n    keyedResolvers = false,\n  } = options;\n  const isExternalRenderFn = renderFn !== defaultRenderFn;\n\n  /**\n   * Processes attributes and styles for a node\n   * @param attrs The node attributes\n   * @returns Processed attributes with styles\n   */\n  const processAttributes = (attrs: BlockAttributes = {}): BlockAttributes => {\n    const { textAlign, class: className, id: idName, style: existingStyle, ...rest } = attrs;\n    const styles: string[] = [];\n\n    // Add existing styles if any\n    if (existingStyle) {\n      styles.push(existingStyle.endsWith(';') ? existingStyle : `${existingStyle};`);\n    }\n\n    // Add text alignment if specified\n    if (textAlign) {\n      styles.push(`text-align: ${textAlign};`);\n    }\n\n    return cleanObject({\n      ...rest,\n      class: className,\n      id: idName,\n      ...(styles.length > 0 ? { style: styles.join(' ') } : {}),\n    });\n  };\n\n  const nodeResolver = (tag: string): StoryblokRichTextNodeResolver<T> =>\n    (node: StoryblokRichTextNode<T>, context): T => {\n      const attributes = processAttributes(node.attrs);\n      return context.render(tag, attributes, node.children || null as any) as T;\n    };\n\n  const imageResolver: StoryblokRichTextNodeResolver<T> = (node: StoryblokRichTextNode<T>, context) => {\n    const { src, alt, title, srcset, sizes } = node.attrs || {};\n    let finalSrc = src;\n    let finalAttrs = {};\n\n    if (optimizeImages) {\n      const { src: optimizedSrc, attrs: optimizedAttrs } = optimizeImage(src, optimizeImages);\n      finalSrc = optimizedSrc;\n      finalAttrs = optimizedAttrs;\n    }\n\n    const imgAttrs = {\n      src: finalSrc,\n      alt,\n      title,\n      srcset,\n      sizes,\n      ...finalAttrs,\n    };\n\n    return context.render('img', cleanObject(imgAttrs)) as T;\n  };\n\n  const headingResolver: StoryblokRichTextNodeResolver<T> = (node: StoryblokRichTextNode<T>, context): T => {\n    const { level, ...rest } = node.attrs || {};\n    const attributes = processAttributes(rest);\n    return context.render(`h${level}`, attributes, node.children) as T;\n  };\n\n  const emojiResolver: StoryblokRichTextNodeResolver<T> = (node: StoryblokRichTextNode<T>, context) => {\n    const internalImg = context.render('img', {\n      src: node.attrs?.fallbackImage,\n      alt: node.attrs?.alt,\n      style: 'width: 1.25em; height: 1.25em; vertical-align: text-top',\n      draggable: 'false',\n      loading: 'lazy',\n    }) as T;\n\n    return context.render('span', {\n      'data-type': 'emoji',\n      'data-name': node.attrs?.name,\n      'data-emoji': node.attrs?.emoji,\n    }, internalImg) as T;\n  };\n\n  const codeBlockResolver: StoryblokRichTextNodeResolver<T> = (node: StoryblokRichTextNode<T>, context): T => {\n    return context.render('pre', node.attrs || {}, context.render('code', {}, node.children || '' as any),\n    ) as T;\n  };\n\n  const markResolver = (tag: string, styled = false): StoryblokRichTextNodeResolver<T> => ({ text, attrs }, context): T => {\n    const { class: className, id: idName, ...styleAttrs } = attrs || {};\n    const attributes = styled\n      ? {\n          class: className,\n          id: idName,\n          style: attrsToStyle(styleAttrs) || undefined,\n        }\n      : attrs || {};\n\n    return context.render(tag, cleanObject(attributes), text as any) as T;\n  };\n\n  const renderToT = (node: any): T => {\n    // Implementation that ensures the return type is T\n    // This might involve checking the type of T and handling accordingly\n    return render(node) as unknown as T;\n  };\n\n  const textResolver: StoryblokRichTextNodeResolver<T> = (node: StoryblokRichTextNode<T>): T => {\n    const { marks, ...rest } = node as TextNode<T>;\n    if ('text' in node) {\n      if (marks) {\n        return marks.reduce(\n          (text: T, mark: MarkNode<T>) => renderToT({ ...mark, text }) as T,\n          renderToT({ ...rest, children: rest.children as T }) as T,\n        );\n      }\n      const attributes = node.attrs || {};\n      if (keyedResolvers) {\n        const currentCount = keyCounters.get('txt') || 0;\n        keyCounters.set('txt', currentCount + 1);\n        attributes.key = `${'txt'}-${currentCount}`;\n      }\n      return textFn(rest.text, attributes) as T;\n    }\n    return '' as T;\n  };\n\n  const linkResolver: StoryblokRichTextNodeResolver<T> = (node: StoryblokRichTextNode<T>, context) => {\n    const { linktype, href, anchor, ...rest } = node.attrs || {};\n\n    let finalHref = '';\n    switch (linktype) {\n      case LinkTypes.ASSET:\n      case LinkTypes.URL:\n        finalHref = href;\n        break;\n      case LinkTypes.EMAIL:\n        finalHref = `mailto:${href}`;\n        break;\n      case LinkTypes.STORY:\n        finalHref = href;\n        if (anchor) {\n          finalHref = `${finalHref}#${anchor}`;\n        }\n        break;\n      default:\n        finalHref = href;\n        break;\n    }\n    const attributes: Record<string, any> = { ...rest };\n    if (finalHref) {\n      attributes.href = finalHref;\n    }\n    return context.render('a', attributes, node.text as any) as T;\n  };\n\n  const componentResolver: StoryblokRichTextNodeResolver<T> = (node: StoryblokRichTextNode<T>, context): T => {\n    console.warn('[StoryblokRichtText] - BLOK resolver is not available for vanilla usage');\n    return context.render('span', {\n      blok: node?.attrs?.body[0],\n      id: node.attrs?.id,\n      style: 'display: none',\n    }) as T;\n  };\n\n  const tableResolver: StoryblokRichTextNodeResolver<T> = (node: StoryblokRichTextNode<T>, context): T => {\n    const attributes = processAttributes(node.attrs);\n    const children = node.children || null as any;\n    return context.render('table', attributes, context.render('tbody', {}, children)) as T;\n  };\n\n  const tableRowResolver: StoryblokRichTextNodeResolver<T> = (node: StoryblokRichTextNode<T>, context): T => {\n    const attributes = processAttributes(node.attrs);\n    return context.render('tr', attributes, node.children) as T;\n  };\n\n  const tableCellResolver: StoryblokRichTextNodeResolver<T> = (node: StoryblokRichTextNode<T>, context): T => {\n    const { colspan, rowspan, colwidth, backgroundColor, textAlign, ...rest } = node.attrs || {};\n    const styles: string[] = [];\n\n    if (colwidth) {\n      styles.push(`width: ${colwidth}px;`);\n    }\n\n    if (backgroundColor) {\n      styles.push(`background-color: ${backgroundColor};`);\n    }\n\n    if (textAlign) {\n      styles.push(`text-align: ${textAlign};`);\n    }\n\n    const attributes = {\n      ...rest,\n      ...(colspan > 1 ? { colspan } : {}),\n      ...(rowspan > 1 ? { rowspan } : {}),\n      ...(styles.length > 0 ? { style: styles.join(' ') } : {}),\n    };\n\n    return context.render('td', cleanObject(attributes), node.children) as T;\n  };\n\n  const tableHeaderResolver: StoryblokRichTextNodeResolver<T> = (node: StoryblokRichTextNode<T>, context): T => {\n    const { colspan, rowspan, colwidth, backgroundColor, textAlign, ...rest } = node.attrs || {};\n    const styles: string[] = [];\n\n    if (colwidth) {\n      styles.push(`width: ${colwidth}px;`);\n    }\n\n    if (backgroundColor) {\n      styles.push(`background-color: ${backgroundColor};`);\n    }\n\n    if (textAlign) {\n      styles.push(`text-align: ${textAlign};`);\n    }\n\n    const attributes = {\n      ...rest,\n      ...(colspan > 1 ? { colspan } : {}),\n      ...(rowspan > 1 ? { rowspan } : {}),\n      ...(styles.length > 0 ? { style: styles.join(' ') } : {}),\n    };\n\n    return context.render('th', cleanObject(attributes), node.children) as T;\n  };\n\n  // Create the original resolvers map with default implementations\n  const originalResolvers = new Map<StoryblokRichTextNodeTypes, StoryblokRichTextNodeResolver<T>>([\n    [BlockTypes.DOCUMENT, nodeResolver('')],\n    [BlockTypes.HEADING, headingResolver],\n    [BlockTypes.PARAGRAPH, nodeResolver('p')],\n    [BlockTypes.UL_LIST, nodeResolver('ul')],\n    [BlockTypes.OL_LIST, nodeResolver('ol')],\n    [BlockTypes.LIST_ITEM, nodeResolver('li')],\n    [BlockTypes.IMAGE, imageResolver],\n    [BlockTypes.EMOJI, emojiResolver],\n    [BlockTypes.CODE_BLOCK, codeBlockResolver],\n    [BlockTypes.HR, nodeResolver('hr')],\n    [BlockTypes.BR, nodeResolver('br')],\n    [BlockTypes.QUOTE, nodeResolver('blockquote')],\n    [BlockTypes.COMPONENT, componentResolver],\n    [TextTypes.TEXT, textResolver],\n    [MarkTypes.LINK, linkResolver],\n    [MarkTypes.ANCHOR, linkResolver],\n    [MarkTypes.STYLED, markResolver('span', true)],\n    [MarkTypes.BOLD, markResolver('strong')],\n    [MarkTypes.TEXT_STYLE, markResolver('span', true)],\n    [MarkTypes.ITALIC, markResolver('em')],\n    [MarkTypes.UNDERLINE, markResolver('u')],\n    [MarkTypes.STRIKE, markResolver('s')],\n    [MarkTypes.CODE, markResolver('code')],\n    [MarkTypes.SUPERSCRIPT, markResolver('sup')],\n    [MarkTypes.SUBSCRIPT, markResolver('sub')],\n    [MarkTypes.HIGHLIGHT, markResolver('mark')],\n    [BlockTypes.TABLE, tableResolver],\n    [BlockTypes.TABLE_ROW, tableRowResolver],\n    [BlockTypes.TABLE_CELL, tableCellResolver],\n    [BlockTypes.TABLE_HEADER, tableHeaderResolver],\n  ]);\n\n  // Create the merged resolvers map that includes user overrides\n  const mergedResolvers = new Map<StoryblokRichTextNodeTypes, StoryblokRichTextNodeResolver<T>>([\n    ...originalResolvers,\n    ...(Object.entries(resolvers).map(([type, resolver]) => [type as StoryblokRichTextNodeTypes, resolver])) as unknown as Array<[StoryblokRichTextNodeTypes, StoryblokRichTextNodeResolver<T>]>,\n  ]);\n\n  const createRenderContext = () => {\n    const contextRenderFn = (tag: string, attrs: BlockAttributes = {}, children?: T): T => {\n      if (keyedResolvers && tag) {\n        const currentCount = keyCounters.get(tag) || 0;\n        keyCounters.set(tag, currentCount + 1);\n        attrs.key = `${tag}-${currentCount}`;\n      }\n      return renderFn(tag, attrs, children);\n    };\n    const context: StoryblokRichTextContext<T> = {\n      render: contextRenderFn,\n      originalResolvers,\n      mergedResolvers,\n    };\n    return context;\n  };\n\n  function renderNode(node: StoryblokRichTextNode<T>): T {\n    const resolver = mergedResolvers.get(node.type);\n    if (!resolver) {\n      console.error('<Storyblok>', `No resolver found for node type ${node.type}`);\n      return '' as unknown as T;\n    }\n\n    const context = createRenderContext();\n\n    if (node.type === 'text') {\n      return resolver(node as StoryblokRichTextNode<T>, context);\n    }\n\n    const children = node.content ? node.content.map(render) : undefined;\n\n    return resolver({\n      ...node,\n      children: children as T,\n    }, context);\n  }\n\n  /**\n   * Renders a rich text node coming from Storyblok.\n   *\n   * @param {StoryblokRichTextNode<T>} node\n   * @return {*}  {T}\n   *\n   * @example\n   *\n   * ```typescript\n   * import StoryblokClient from 'storyblok-js-client'\n   * import { richTextResolver } from '@storyblok/richtext'\n   *\n   * const storyblok = new StoryblokClient({\n   *  accessToken:  import.meta.env.VITE_STORYBLOK_TOKEN,\n   * })\n   *\n   * const story = await client.get('cdn/stories/home', {\n   *  version: 'draft',\n   * })\n   *\n   * const html = richTextResolver().render(story.data.story.content.richtext)\n   * ```\n   *\n   */\n  function render(node: StoryblokRichTextNode<T>): T {\n    if (node.type === 'doc') {\n      return isExternalRenderFn ? node.content.map(renderNode) as T : node.content.map(renderNode).join('') as T;\n    }\n    return Array.isArray(node) ? node.map(renderNode) as T : renderNode(node) as T;\n  }\n\n  return {\n    render,\n  };\n}\n"],"mappings":"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"}