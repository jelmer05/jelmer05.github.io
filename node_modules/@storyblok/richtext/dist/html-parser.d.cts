//#region src/types/index.d.ts

/**
 * Represents text alignment attributes that can be applied to block-level elements.
 */
interface TextAlignmentAttrs {
  textAlign?: 'left' | 'center' | 'right' | 'justify';
}
/**
 * Represents common attributes that can be applied to block-level elements.
 */
interface BlockAttributes extends TextAlignmentAttrs {
  class?: string;
  id?: string;
  [key: string]: any;
}
interface StoryblokRichTextDocumentNode {
  type: string;
  content?: StoryblokRichTextDocumentNode[];
  attrs?: BlockAttributes;
  text?: string;
  marks?: StoryblokRichTextDocumentNode[];
}
//#endregion
//#region src/html-parser.d.ts
interface StyleOption {
  name: string;
  value: string;
}
type RichTextAttrs = Record<string, string | number | boolean | null>;
type HTMLAttrs = Record<string, string>;
interface HTMLParserOptions {
  allowCustomAttributes?: boolean;
  normalizeWhitespace?: boolean;
  resolvers?: Record<string, HTMLNodeElementResolver>;
  styleOptions?: StyleOption[];
}
interface HTMLNodeElement {
  attrs: HTMLAttrs;
  children?: (HTMLNodeElement | HTMLNodeText)[];
  parent: HTMLNodeElement | null;
  tag: keyof HTMLElementTagNameMap;
  text: string;
  type: 'element';
}
interface HTMLNodeText {
  isLayoutWhitespace: boolean;
  isWhitespace: boolean;
  parent: HTMLNodeElement | null;
  text: string;
  type: 'text';
}
interface HTMLNodeElementResolverOptions {
  allowCustomAttributes?: boolean;
  styleOptions?: StyleOption[];
}
type HTMLNodeElementResolver = (node: HTMLNodeElement, content: StoryblokRichTextDocumentNode[] | undefined, options: HTMLNodeElementResolverOptions) => StoryblokRichTextDocumentNode | StoryblokRichTextDocumentNode[] | null;
declare const HTMLTags: {
  H1: string;
  H2: string;
  H3: string;
  H4: string;
  H5: string;
  H6: string;
  P: string;
  OL: string;
  UL: string;
  LI: string;
  TABLE: string;
  THEAD: string;
  TBODY: string;
  TR: string;
  TH: string;
  TD: string;
  BLOCKQUOTE: string;
  PRE: string;
  SPAN: string;
  STRONG: string;
  B: string;
  EM: string;
  I: string;
  A: string;
  DEL: string;
  S: string;
  CODE: string;
  IMG: string;
  HR: string;
  BR: string;
};
declare const defaultOptions: Required<HTMLParserOptions>;
/**
 * Convert HTML to Storyblok Rich Text format.
 */
declare function htmlToStoryblokRichtext(html: string, options?: HTMLParserOptions): StoryblokRichTextDocumentNode;
//#endregion
export { HTMLAttrs, HTMLNodeElement, HTMLNodeElementResolver, HTMLNodeElementResolverOptions, HTMLNodeText, HTMLParserOptions, HTMLTags, RichTextAttrs, StyleOption, defaultOptions, htmlToStoryblokRichtext };
//# sourceMappingURL=html-parser.d.cts.map