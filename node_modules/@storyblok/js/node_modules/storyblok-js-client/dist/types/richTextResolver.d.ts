import { ISbSchema, ISbRichtext } from './interfaces';
type OptimizeImagesOptions = boolean | {
    class?: string;
    filters?: {
        blur?: number;
        brightness?: number;
        fill?: string;
        format?: 'webp' | 'jpeg' | 'png';
        grayscale?: boolean;
        quality?: number;
        rotate?: 90 | 180 | 270;
    };
    height?: number;
    loading?: 'lazy' | 'eager';
    sizes?: string[];
    srcset?: (number | [number, number])[];
    width?: number;
};
type RenderOptions = {
    optimizeImages?: OptimizeImagesOptions;
};
interface ISbFunction<T extends any[], R> {
    (...args: T): R;
}
declare class RichTextResolver {
    private marks;
    private nodes;
    constructor(schema?: ISbSchema);
    addNode(key: string, schema: ISbSchema | ISbFunction<any, any>): void;
    addMark(key: string, schema: ISbSchema): void;
    render(data?: ISbRichtext, options?: RenderOptions): string;
    private optimizeImages;
    private renderNode;
    private renderTag;
    private renderOpeningTag;
    private renderClosingTag;
    private getMatchingNode;
    private getMatchingMark;
    private renderEmoji;
}
export default RichTextResolver;
