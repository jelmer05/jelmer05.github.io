var u = Object.defineProperty;
var g = (e, r, t) => r in e ? u(e, r, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[r] = t;
var a = (e, r, t) => (g(e, typeof r != "symbol" ? r + "" : r, t), t);
class p {
  constructor() {
    a(this, "isCDNUrl", (r = "") => r.indexOf("/cdn/") > -1);
    a(this, "getOptionsPage", (r, t = 25, n = 1) => ({
      ...r,
      per_page: t,
      page: n
    }));
    a(this, "delay", (r) => new Promise((t) => setTimeout(t, r)));
    a(this, "arrayFrom", (r = 0, t) => [...Array(r)].map(t));
    a(this, "range", (r = 0, t = r) => {
      const n = Math.abs(t - r) || 0, s = r < t ? 1 : -1;
      return this.arrayFrom(n, (o, c) => c * s + r);
    });
    a(this, "asyncMap", async (r, t) => Promise.all(r.map(t)));
    a(this, "flatMap", (r = [], t) => r.map(t).reduce((n, s) => [...n, ...s], []));
    /**
     * @method escapeHTML
     * @param  {String} string text to be parsed
     * @return {String} Text parsed
     */
    a(this, "escapeHTML", function(r) {
      const t = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      }, n = /[&<>"']/g, s = RegExp(n.source);
      return r && s.test(r) ? r.replace(n, (o) => t[o]) : r;
    });
  }
  /**
   * @method stringify
   * @param  {Object} params
   * @param  {String} prefix
   * @param  {Boolean} isArray
   * @return {String} Stringified object
   */
  stringify(r, t, n) {
    const s = [];
    for (const o in r) {
      if (!Object.prototype.hasOwnProperty.call(r, o))
        continue;
      const c = r[o], l = n ? "" : encodeURIComponent(o);
      let i;
      typeof c == "object" ? i = this.stringify(
        c,
        t ? t + encodeURIComponent("[" + l + "]") : l,
        Array.isArray(c)
      ) : i = (t ? t + encodeURIComponent("[" + l + "]") : l) + "=" + encodeURIComponent(c), s.push(i);
    }
    return s.join("&");
  }
  /**
   * @method getRegionURL
   * @param  {String} regionCode region code, could be eu, us or cn
   * @return {String} The base URL of the region
   */
  getRegionURL(r) {
    const t = "api.storyblok.com", n = "api-us.storyblok.com", s = "app.storyblokchina.cn";
    switch (r) {
      case "us":
        return n;
      case "cn":
        return s;
      default:
        return t;
    }
  }
}
const m = function(e, r) {
  const t = {};
  for (const n in e) {
    const s = e[n];
    r.indexOf(n) > -1 && s !== null && (t[n] = s);
  }
  return t;
}, h = (e) => e === "email", y = () => ({
  singleTag: "hr"
}), f = () => ({
  tag: "blockquote"
}), d = () => ({
  tag: "ul"
}), k = (e) => ({
  tag: [
    "pre",
    {
      tag: "code",
      attrs: e.attrs
    }
  ]
}), b = () => ({
  singleTag: "br"
}), _ = (e) => ({
  tag: `h${e.attrs.level}`
}), U = (e) => ({
  singleTag: [
    {
      tag: "img",
      attrs: m(e.attrs, ["src", "alt", "title"])
    }
  ]
}), R = () => ({
  tag: "li"
}), L = () => ({
  tag: "ol"
}), T = () => ({
  tag: "p"
}), j = (e) => ({
  tag: [
    {
      tag: "span",
      attrs: {
        "data-type": "emoji",
        "data-name": e.attrs.name,
        emoji: e.attrs.emoji
      }
    }
  ]
}), H = () => ({
  tag: "b"
}), I = () => ({
  tag: "strike"
}), P = () => ({
  tag: "u"
}), A = () => ({
  tag: "strong"
}), C = () => ({
  tag: "code"
}), M = () => ({
  tag: "i"
}), $ = (e) => {
  if (!e.attrs)
    return {
      tag: ""
    };
  const r = new p().escapeHTML, t = { ...e.attrs }, { linktype: n = "url" } = e.attrs;
  if (delete t.linktype, t.href && (t.href = r(e.attrs.href || "")), h(n) && (t.href = `mailto:${t.href}`), t.anchor && (t.href = `${t.href}#${t.anchor}`, delete t.anchor), t.custom) {
    for (const s in t.custom)
      t[s] = t.custom[s];
    delete t.custom;
  }
  return {
    tag: [
      {
        tag: "a",
        attrs: t
      }
    ]
  };
}, O = (e) => ({
  tag: [
    {
      tag: "span",
      attrs: e.attrs
    }
  ]
}), w = () => ({
  tag: "sub"
}), E = () => ({
  tag: "sup"
}), q = (e) => ({
  tag: [
    {
      tag: "span",
      attrs: e.attrs
    }
  ]
}), v = (e) => {
  var t;
  return (t = e.attrs) != null && t.color ? {
    tag: [
      {
        tag: "span",
        attrs: {
          style: `background-color:${e.attrs.color};`
        }
      }
    ]
  } : {
    tag: ""
  };
}, S = (e) => {
  var t;
  return (t = e.attrs) != null && t.color ? {
    tag: [
      {
        tag: "span",
        attrs: {
          style: `color:${e.attrs.color}`
        }
      }
    ]
  } : {
    tag: ""
  };
}, F = {
  nodes: {
    horizontal_rule: y,
    blockquote: f,
    bullet_list: d,
    code_block: k,
    hard_break: b,
    heading: _,
    image: U,
    list_item: R,
    ordered_list: L,
    paragraph: T,
    emoji: j
  },
  marks: {
    bold: H,
    strike: I,
    underline: P,
    strong: A,
    code: C,
    italic: M,
    link: $,
    styled: O,
    subscript: w,
    superscript: E,
    anchor: q,
    highlight: v,
    textStyle: S
  }
};
export {
  F as default
};
