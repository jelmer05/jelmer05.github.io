var v = Object.defineProperty;
var R = (a, t, e) => t in a ? v(a, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : a[t] = e;
var h = (a, t, e) => (R(a, typeof t != "symbol" ? t + "" : t, e), e);
function k(a) {
  return !(a !== a || a === 1 / 0 || a === -1 / 0);
}
function _(a, t, e) {
  if (!k(t))
    throw new TypeError("Expected `limit` to be a finite number");
  if (!k(e))
    throw new TypeError("Expected `interval` to be a finite number");
  const s = [];
  let r = [], n = 0;
  const i = function() {
    n++;
    const o = setTimeout(function() {
      n--, s.length > 0 && i(), r = r.filter(function(u) {
        return u !== o;
      });
    }, e);
    r.indexOf(o) < 0 && r.push(o);
    const c = s.shift();
    c.resolve(a.apply(c.self, c.args));
  }, l = function(...o) {
    const c = this;
    return new Promise(function(u, d) {
      s.push({
        resolve: u,
        reject: d,
        args: o,
        self: c
      }), n < t && i();
    });
  };
  return l.abort = function() {
    r.forEach(clearTimeout), r = [], s.forEach(function(o) {
      o.reject(function() {
        Error.call(this, "Throttled function aborted"), this.name = "AbortError";
      });
    }), s.length = 0;
  }, l;
}
const T = function(a, t) {
  const e = {};
  for (const s in a) {
    const r = a[s];
    t.indexOf(s) > -1 && r !== null && (e[s] = r);
  }
  return e;
}, b = (a) => a === "email", w = () => ({
  singleTag: "hr"
}), P = () => ({
  tag: "blockquote"
}), $ = () => ({
  tag: "ul"
}), x = (a) => ({
  tag: [
    "pre",
    {
      tag: "code",
      attrs: a.attrs
    }
  ]
}), C = () => ({
  singleTag: "br"
}), S = (a) => ({
  tag: `h${a.attrs.level}`
}), E = (a) => ({
  singleTag: [
    {
      tag: "img",
      attrs: T(a.attrs, ["src", "alt", "title"])
    }
  ]
}), U = () => ({
  tag: "li"
}), O = () => ({
  tag: "ol"
}), A = () => ({
  tag: "p"
}), L = (a) => ({
  tag: [
    {
      tag: "span",
      attrs: {
        ["data-type"]: "emoji",
        ["data-name"]: a.attrs.name
      }
    }
  ]
}), H = () => ({
  tag: "b"
}), M = () => ({
  tag: "strike"
}), N = () => ({
  tag: "u"
}), q = () => ({
  tag: "strong"
}), z = () => ({
  tag: "code"
}), j = () => ({
  tag: "i"
}), F = (a) => {
  const t = { ...a.attrs }, { linktype: e = "url" } = a.attrs;
  if (b(e) && (t.href = `mailto:${t.href}`), t.anchor && (t.href = `${t.href}#${t.anchor}`, delete t.anchor), t.custom) {
    for (const s in t.custom)
      t[s] = t.custom[s];
    delete t.custom;
  }
  return {
    tag: [
      {
        tag: "a",
        attrs: t
      }
    ]
  };
}, I = (a) => ({
  tag: [
    {
      tag: "span",
      attrs: a.attrs
    }
  ]
}), V = () => ({
  tag: "sub"
}), J = () => ({
  tag: "sup"
}), K = {
  nodes: {
    horizontal_rule: w,
    blockquote: P,
    bullet_list: $,
    code_block: x,
    hard_break: C,
    heading: S,
    image: E,
    list_item: U,
    ordered_list: O,
    paragraph: A,
    emoji: L
  },
  marks: {
    bold: H,
    strike: M,
    underline: N,
    strong: q,
    code: z,
    italic: j,
    link: F,
    styled: I,
    subscript: V,
    superscript: J
  }
}, Q = function(a) {
  const t = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  }, e = /[&<>"']/g, s = RegExp(e.source);
  return a && s.test(a) ? a.replace(e, (r) => t[r]) : a;
};
class m {
  constructor(t) {
    h(this, "marks");
    h(this, "nodes");
    t || (t = K), this.marks = t.marks || [], this.nodes = t.nodes || [];
  }
  addNode(t, e) {
    this.nodes[t] = e;
  }
  addMark(t, e) {
    this.marks[t] = e;
  }
  render(t, e = { optimizeImages: !1 }) {
    if (t && t.content && Array.isArray(t.content)) {
      let s = "";
      return t.content.forEach((r) => {
        s += this.renderNode(r);
      }), e.optimizeImages ? s.replace(/a.storyblok.com\/f\/(\d+)\/([^.]+)\.(gif|jpg|jpeg|png|tif|tiff|bmp)/g, "a.storyblok.com/f/$1/$2.$3/m/") : s;
    }
    return console.warn(
      "The render method must receive an object with a content field, which is an array"
    ), "";
  }
  renderNode(t) {
    const e = [];
    t.marks && t.marks.forEach((r) => {
      const n = this.getMatchingMark(r);
      n && e.push(this.renderOpeningTag(n.tag));
    });
    const s = this.getMatchingNode(t);
    return s && s.tag && e.push(this.renderOpeningTag(s.tag)), t.content ? t.content.forEach((r) => {
      e.push(this.renderNode(r));
    }) : t.text ? e.push(Q(t.text)) : s && s.singleTag ? e.push(this.renderTag(s.singleTag, " /")) : s && s.html && e.push(s.html), s && s.tag && e.push(this.renderClosingTag(s.tag)), t.marks && t.marks.slice(0).reverse().forEach((r) => {
      const n = this.getMatchingMark(r);
      n && e.push(this.renderClosingTag(n.tag));
    }), e.join("");
  }
  renderTag(t, e) {
    return t.constructor === String ? `<${t}${e}>` : t.map((r) => {
      if (r.constructor === String)
        return `<${r}${e}>`;
      {
        let n = `<${r.tag}`;
        if (r.attrs)
          for (const i in r.attrs) {
            const l = r.attrs[i];
            l !== null && (n += ` ${i}="${l}"`);
          }
        return `${n}${e}>`;
      }
    }).join("");
  }
  renderOpeningTag(t) {
    return this.renderTag(t, "");
  }
  renderClosingTag(t) {
    return t.constructor === String ? `</${t}>` : t.slice(0).reverse().map((s) => s.constructor === String ? `</${s}>` : `</${s.tag}>`).join("");
  }
  getMatchingNode(t) {
    const e = this.nodes[t.type];
    if (typeof e == "function")
      return e(t);
  }
  getMatchingMark(t) {
    const e = this.marks[t.type];
    if (typeof e == "function")
      return e(t);
  }
}
class y {
  constructor() {
    h(this, "isCDNUrl", (t = "") => t.indexOf("/cdn/") > -1);
    h(this, "getOptionsPage", (t, e = 25, s = 1) => ({
      ...t,
      per_page: e,
      page: s
    }));
    h(this, "delay", (t) => new Promise((e) => setTimeout(e, t)));
    h(this, "arrayFrom", (t = 0, e) => [...Array(t)].map(e));
    h(this, "range", (t = 0, e = t) => {
      const s = Math.abs(e - t) || 0, r = t < e ? 1 : -1;
      return this.arrayFrom(s, (n, i) => i * r + t);
    });
    h(this, "asyncMap", async (t, e) => Promise.all(t.map(e)));
    h(this, "flatMap", (t = [], e) => t.map(e).reduce((s, r) => [...s, ...r], []));
  }
  /**
   * @method stringify
   * @param  {Object} params
   * @param  {String} prefix
   * @param  {Boolean} isArray
   * @return {String} Stringified object
   */
  stringify(t, e, s) {
    const r = [];
    for (const n in t) {
      if (!Object.prototype.hasOwnProperty.call(t, n))
        continue;
      const i = t[n], l = s ? "" : encodeURIComponent(n);
      let o;
      typeof i == "object" ? o = this.stringify(
        i,
        e ? e + encodeURIComponent("[" + l + "]") : l,
        Array.isArray(i)
      ) : o = (e ? e + encodeURIComponent("[" + l + "]") : l) + "=" + encodeURIComponent(i), r.push(o);
    }
    return r.join("&");
  }
  /**
   * @method getRegionURL
   * @param  {String} regionCode region code, could be eu, us or cn
   * @return {String} The base URL of the region
   */
  getRegionURL(t) {
    const e = "api.storyblok.com", s = "api-us.storyblok.com", r = "app.storyblokchina.cn";
    switch (t) {
      case "us":
        return s;
      case "cn":
        return r;
      default:
        return e;
    }
  }
}
class B {
  constructor(t) {
    h(this, "baseURL");
    h(this, "timeout");
    h(this, "headers");
    h(this, "responseInterceptor");
    h(this, "fetch");
    h(this, "ejectInterceptor");
    h(this, "url");
    h(this, "parameters");
    this.baseURL = t.baseURL, this.headers = t.headers || new Headers(), this.timeout = t != null && t.timeout ? t.timeout * 1e3 : 0, this.responseInterceptor = t.responseInterceptor, this.fetch = (...e) => t.fetch ? t.fetch(...e) : fetch(...e), this.ejectInterceptor = !1, this.url = "", this.parameters = {};
  }
  /**
   *
   * @param url string
   * @param params ISbStoriesParams
   * @returns Promise<ISbResponse | Error>
   */
  get(t, e) {
    return this.url = t, this.parameters = e, this._methodHandler("get");
  }
  post(t, e) {
    return this.url = t, this.parameters = e, this._methodHandler("post");
  }
  put(t, e) {
    return this.url = t, this.parameters = e, this._methodHandler("put");
  }
  delete(t, e) {
    return this.url = t, this.parameters = e, this._methodHandler("delete");
  }
  async _responseHandler(t) {
    const e = [], s = {
      data: {},
      headers: {},
      status: 0,
      statusText: ""
    };
    t.status !== 204 && await t.json().then((r) => {
      s.data = r;
    });
    for (const r of t.headers.entries())
      e[r[0]] = r[1];
    return s.headers = { ...e }, s.status = t.status, s.statusText = t.statusText, s;
  }
  async _methodHandler(t) {
    let e = `${this.baseURL}${this.url}`, s = null;
    if (t === "get") {
      const o = new y();
      e = `${this.baseURL}${this.url}?${o.stringify(
        this.parameters
      )}`;
    } else
      s = JSON.stringify(this.parameters);
    const r = new URL(e), n = new AbortController(), { signal: i } = n;
    let l;
    this.timeout && (l = setTimeout(() => n.abort(), this.timeout));
    try {
      const o = await this.fetch(`${r}`, {
        method: t,
        headers: this.headers,
        body: s,
        signal: i
      });
      this.timeout && clearTimeout(l);
      const c = await this._responseHandler(o);
      return this.responseInterceptor && !this.ejectInterceptor ? this._statusHandler(this.responseInterceptor(c)) : this._statusHandler(c);
    } catch (o) {
      return {
        message: o
      };
    }
  }
  eject() {
    this.ejectInterceptor = !0;
  }
  _statusHandler(t) {
    const e = /20[0-6]/g;
    return new Promise((s, r) => {
      if (e.test(`${t.status}`))
        return s(t);
      const n = {
        message: new Error(t.statusText),
        status: t.status,
        response: Array.isArray(t.data) ? t.data[0] : t.data.error || t.data.slug
      };
      r(n);
    });
  }
}
let p = {};
const f = {};
class W {
  /**
   *
   * @param config ISbConfig interface
   * @param endpoint string, optional
   */
  constructor(t, e) {
    h(this, "client");
    h(this, "maxRetries");
    h(this, "throttle");
    h(this, "accessToken");
    h(this, "cache");
    h(this, "helpers");
    h(this, "resolveCounter");
    h(this, "relations");
    h(this, "links");
    h(this, "richTextResolver");
    h(this, "resolveNestedRelations");
    if (!e) {
      const n = new y().getRegionURL, i = t.https === !1 ? "http" : "https";
      t.oauthToken ? e = `${i}://${n(t.region)}/v1` : e = `${i}://${n(t.region)}/v2`;
    }
    const s = new Headers();
    s.set("Content-Type", "application/json"), s.set("Accept", "application/json"), s.forEach((n, i) => {
      t.headers && t.headers[i] && s.set(i, t.headers[i]);
    });
    let r = 5;
    t.oauthToken && (s.set("Authorization", t.oauthToken), r = 3), t.rateLimit && (r = t.rateLimit), t.richTextSchema ? this.richTextResolver = new m(t.richTextSchema) : this.richTextResolver = new m(), t.componentResolver && this.setComponentResolver(t.componentResolver), this.maxRetries = t.maxRetries, this.throttle = _(this.throttledRequest, r, 1e3), this.accessToken = t.accessToken || "", this.relations = {}, this.links = {}, this.cache = t.cache || { clear: "manual" }, this.helpers = new y(), this.resolveCounter = 0, this.resolveNestedRelations = !1, this.client = new B({
      baseURL: e,
      timeout: t.timeout || 0,
      headers: s,
      responseInterceptor: t.responseInterceptor,
      fetch: t.fetch
    });
  }
  setComponentResolver(t) {
    this.richTextResolver.addNode("blok", (e) => {
      let s = "";
      return e.attrs.body.forEach((r) => {
        s += t(r.component, r);
      }), {
        html: s
      };
    });
  }
  parseParams(t) {
    return t.version || (t.version = "published"), t.token || (t.token = this.getToken()), t.cv || (t.cv = f[t.token]), Array.isArray(t.resolve_relations) && (t.resolve_relations = t.resolve_relations.join(",")), t;
  }
  factoryParamOptions(t, e) {
    return this.helpers.isCDNUrl(t) ? this.parseParams(e) : e;
  }
  makeRequest(t, e, s, r) {
    const n = this.factoryParamOptions(
      t,
      this.helpers.getOptionsPage(e, s, r)
    );
    return this.cacheResponse(t, n);
  }
  get(t, e) {
    e || (e = {});
    const s = `/${t}`, r = this.factoryParamOptions(s, e);
    return this.cacheResponse(s, r);
  }
  async getAll(t, e, s) {
    const r = (e == null ? void 0 : e.per_page) || 25, n = `/${t}`, i = n.split("/"), l = s || i[i.length - 1], o = 1, c = await this.makeRequest(n, e, r, o), u = c.total ? Math.ceil(c.total / r) : 1, d = await this.helpers.asyncMap(
      this.helpers.range(o, u),
      (g) => this.makeRequest(n, e, r, g + 1)
    );
    return this.helpers.flatMap(
      [c, ...d],
      (g) => Object.values(g.data[l])
    );
  }
  post(t, e) {
    const s = `/${t}`;
    return Promise.resolve(this.throttle("post", s, e));
  }
  put(t, e) {
    const s = `/${t}`;
    return Promise.resolve(this.throttle("put", s, e));
  }
  delete(t, e) {
    const s = `/${t}`;
    return Promise.resolve(this.throttle("delete", s, e));
  }
  getStories(t) {
    return this.get("cdn/stories", t);
  }
  getStory(t, e) {
    return this.get(`cdn/stories/${t}`, e);
  }
  getToken() {
    return this.accessToken;
  }
  ejectInterceptor() {
    this.client.eject();
  }
  _cleanCopy(t) {
    return JSON.parse(JSON.stringify(t));
  }
  _insertLinks(t, e, s) {
    const r = t[e];
    r && r.fieldtype == "multilink" && r.linktype == "story" && typeof r.id == "string" && this.links[s][r.id] ? r.story = this._cleanCopy(this.links[s][r.id]) : r && r.linktype === "story" && typeof r.uuid == "string" && this.links[s][r.uuid] && (r.story = this._cleanCopy(this.links[s][r.uuid]));
  }
  _insertRelations(t, e, s, r) {
    if (s.indexOf(`${t.component}.${e}`) > -1) {
      if (typeof t[e] == "string")
        this.relations[r][t[e]] && (t[e] = this._cleanCopy(
          this.relations[r][t[e]]
        ));
      else if (t[e] && t[e].constructor === Array) {
        const n = [];
        t[e].forEach((i) => {
          this.relations[r][i] && n.push(this._cleanCopy(this.relations[r][i]));
        }), t[e] = n;
      }
    }
  }
  iterateTree(t, e, s) {
    const r = (n) => {
      if (n != null) {
        if (n.constructor === Array)
          for (let i = 0; i < n.length; i++)
            r(n[i]);
        else if (n.constructor === Object) {
          if (n._stopResolving)
            return;
          for (const i in n)
            (n.component && n._uid || n.type === "link") && (this._insertRelations(
              n,
              i,
              e,
              s
            ), this._insertLinks(
              n,
              i,
              s
            )), r(n[i]);
        }
      }
    };
    r(t.content);
  }
  async resolveLinks(t, e, s) {
    let r = [];
    if (t.link_uuids) {
      const n = t.link_uuids.length, i = [], l = 50;
      for (let o = 0; o < n; o += l) {
        const c = Math.min(n, o + l);
        i.push(t.link_uuids.slice(o, c));
      }
      for (let o = 0; o < i.length; o++)
        (await this.getStories({
          per_page: l,
          language: e.language,
          version: e.version,
          by_uuids: i[o].join(",")
        })).data.stories.forEach(
          (u) => {
            r.push(u);
          }
        );
    } else
      r = t.links;
    r.forEach((n) => {
      this.links[s][n.uuid] = {
        ...n,
        _stopResolving: !0
      };
    });
  }
  async resolveRelations(t, e, s) {
    let r = [];
    if (t.rel_uuids) {
      const n = t.rel_uuids.length, i = [], l = 50;
      for (let o = 0; o < n; o += l) {
        const c = Math.min(n, o + l);
        i.push(t.rel_uuids.slice(o, c));
      }
      for (let o = 0; o < i.length; o++)
        (await this.getStories({
          per_page: l,
          language: e.language,
          version: e.version,
          by_uuids: i[o].join(",")
        })).data.stories.forEach((u) => {
          r.push(u);
        });
    } else
      r = t.rels;
    r && r.length > 0 && r.forEach((n) => {
      this.relations[s][n.uuid] = {
        ...n,
        _stopResolving: !0
      };
    });
  }
  async resolveStories(t, e, s) {
    var n, i;
    let r = [];
    if (this.links[s] = {}, this.relations[s] = {}, typeof e.resolve_relations < "u" && e.resolve_relations.length > 0 && (typeof e.resolve_relations == "string" && (r = e.resolve_relations.split(",")), await this.resolveRelations(t, e, s)), e.resolve_links && ["1", "story", "url"].indexOf(e.resolve_links) > -1 && ((n = t.links) != null && n.length || (i = t.link_uuids) != null && i.length) && await this.resolveLinks(t, e, s), this.resolveNestedRelations)
      for (const l in this.relations[s])
        this.iterateTree(
          this.relations[s][l],
          r,
          s
        );
    t.story ? this.iterateTree(t.story, r, s) : t.stories.forEach((l) => {
      this.iterateTree(l, r, s);
    }), delete this.links[s], delete this.relations[s];
  }
  async cacheResponse(t, e, s) {
    const r = this.helpers.stringify({ url: t, params: e }), n = this.cacheProvider();
    if (this.cache.clear === "auto" && e.version === "draft" && await this.flushCache(), e.version === "published" && t != "/cdn/spaces/me") {
      const i = await n.get(r);
      if (i)
        return Promise.resolve(i);
    }
    return new Promise((i, l) => {
      try {
        (async () => {
          var o;
          try {
            const c = await this.throttle("get", t, e);
            let u = { data: c.data, headers: c.headers };
            if ((o = c.headers) != null && o["per-page"] && (u = Object.assign({}, u, {
              perPage: c.headers["per-page"] ? parseInt(c.headers["per-page"]) : 0,
              total: c.headers["per-page"] ? parseInt(c.headers.total) : 0
            })), c.status != 200)
              return l(c);
            if (u.data.story || u.data.stories) {
              const d = this.resolveCounter = ++this.resolveCounter % 1e3;
              await this.resolveStories(u.data, e, `${d}`);
            }
            return e.version === "published" && t != "/cdn/spaces/me" && await n.set(r, u), u.data.cv && e.token && (e.version == "draft" && f[e.token] != u.data.cv && await this.flushCache(), f[e.token] = u.data.cv), i(u);
          } catch (c) {
            return l(c);
          }
        })();
      } catch {
      }
    });
  }
  throttledRequest(t, e, s) {
    return this.client[t](e, s);
  }
  cacheVersions() {
    return f;
  }
  cacheVersion() {
    return f[this.accessToken];
  }
  setCacheVersion(t) {
    this.accessToken && (f[this.accessToken] = t);
  }
  cacheProvider() {
    switch (this.cache.type) {
      case "memory":
        return {
          get(t) {
            return Promise.resolve(p[t]);
          },
          getAll() {
            return Promise.resolve(p);
          },
          set(t, e) {
            return p[t] = e, Promise.resolve(void 0);
          },
          flush() {
            return p = {}, Promise.resolve(void 0);
          }
        };
      case "custom":
        if (this.cache.custom)
          return this.cache.custom;
      default:
        return {
          get() {
            return Promise.resolve(void 0);
          },
          getAll() {
            return Promise.resolve(void 0);
          },
          set() {
            return Promise.resolve(void 0);
          },
          flush() {
            return Promise.resolve(void 0);
          }
        };
    }
  }
  async flushCache() {
    return await this.cacheProvider().flush(), this;
  }
}
export {
  m as RichtextResolver,
  K as RichtextSchema,
  B as SbFetch,
  y as SbHelpers,
  W as default
};
