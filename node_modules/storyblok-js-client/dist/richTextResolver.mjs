var $ = Object.defineProperty;
var p = (r, e, t) => e in r ? $(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;
var m = (r, e, t) => (p(r, typeof e != "symbol" ? e + "" : e, t), t);
const k = function(r, e) {
  const t = {};
  for (const s in r) {
    const a = r[s];
    e.indexOf(s) > -1 && a !== null && (t[s] = a);
  }
  return t;
}, j = (r) => r === "email", T = () => ({
  singleTag: "hr"
}), x = () => ({
  tag: "blockquote"
}), z = () => ({
  tag: "ul"
}), w = (r) => ({
  tag: [
    "pre",
    {
      tag: "code",
      attrs: r.attrs
    }
  ]
}), I = () => ({
  singleTag: "br"
}), E = (r) => ({
  tag: `h${r.attrs.level}`
}), M = (r) => ({
  singleTag: [
    {
      tag: "img",
      attrs: k(r.attrs, ["src", "alt", "title"])
    }
  ]
}), S = () => ({
  tag: "li"
}), q = () => ({
  tag: "ol"
}), R = () => ({
  tag: "p"
}), A = (r) => ({
  tag: [
    {
      tag: "span",
      attrs: {
        ["data-type"]: "emoji",
        ["data-name"]: r.attrs.name,
        emoji: r.attrs.emoji
      }
    }
  ]
}), H = () => ({
  tag: "b"
}), N = () => ({
  tag: "strike"
}), _ = () => ({
  tag: "u"
}), O = () => ({
  tag: "strong"
}), C = () => ({
  tag: "code"
}), L = () => ({
  tag: "i"
}), U = (r) => {
  const e = { ...r.attrs }, { linktype: t = "url" } = r.attrs;
  if (j(t) && (e.href = `mailto:${e.href}`), e.anchor && (e.href = `${e.href}#${e.anchor}`, delete e.anchor), e.custom) {
    for (const s in e.custom)
      e[s] = e.custom[s];
    delete e.custom;
  }
  return {
    tag: [
      {
        tag: "a",
        attrs: e
      }
    ]
  };
}, F = (r) => ({
  tag: [
    {
      tag: "span",
      attrs: r.attrs
    }
  ]
}), W = () => ({
  tag: "sub"
}), B = () => ({
  tag: "sup"
}), D = (r) => ({
  tag: [
    {
      tag: "span",
      attrs: r.attrs
    }
  ]
}), G = (r) => ({
  tag: [
    {
      tag: "span",
      attrs: {
        style: `background-color:${r.attrs.color};`
      }
    }
  ]
}), J = (r) => ({
  tag: [
    {
      tag: "span",
      attrs: {
        style: `color:${r.attrs.color}`
      }
    }
  ]
}), K = {
  nodes: {
    horizontal_rule: T,
    blockquote: x,
    bullet_list: z,
    code_block: w,
    hard_break: I,
    heading: E,
    image: M,
    list_item: S,
    ordered_list: q,
    paragraph: R,
    emoji: A
  },
  marks: {
    bold: H,
    strike: N,
    underline: _,
    strong: O,
    code: C,
    italic: L,
    link: U,
    styled: F,
    subscript: W,
    superscript: B,
    anchor: D,
    highlight: G,
    textStyle: J
  }
}, P = function(r) {
  const e = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  }, t = /[&<>"']/g, s = RegExp(t.source);
  return r && s.test(r) ? r.replace(t, (a) => e[a]) : r;
};
class V {
  constructor(e) {
    m(this, "marks");
    m(this, "nodes");
    e || (e = K), this.marks = e.marks || [], this.nodes = e.nodes || [];
  }
  addNode(e, t) {
    this.nodes[e] = t;
  }
  addMark(e, t) {
    this.marks[e] = t;
  }
  render(e, t = { optimizeImages: !1 }) {
    if (e && e.content && Array.isArray(e.content)) {
      let s = "";
      return e.content.forEach((a) => {
        s += this.renderNode(a);
      }), t.optimizeImages ? this.optimizeImages(s, t.optimizeImages) : s;
    }
    return console.warn(
      `The render method must receive an Object with a "content" field.
			The "content" field must be an array of nodes as the type ISbRichtext.
			ISbRichtext:
				content?: ISbRichtext[]
				marks?: ISbRichtext[]
				attrs?: any
				text?: string
				type: string
				
				Example:
				{
					content: [
						{
							content: [
								{
									text: 'Hello World',
									type: 'text'
								}
							],
							type: 'paragraph'
						}
					],
					type: 'doc'
				}`
    ), "";
  }
  optimizeImages(e, t) {
    let s = 0, a = 0, i = "", n = "";
    typeof t != "boolean" && (typeof t.width == "number" && t.width > 0 && (i += `width="${t.width}" `, s = t.width), typeof t.height == "number" && t.height > 0 && (i += `height="${t.height}" `, a = t.height), (t.loading === "lazy" || t.loading === "eager") && (i += `loading="${t.loading}" `), typeof t.class == "string" && t.class.length > 0 && (i += `class="${t.class}" `), t.filters && (typeof t.filters.blur == "number" && t.filters.blur >= 0 && t.filters.blur <= 100 && (n += `:blur(${t.filters.blur})`), typeof t.filters.brightness == "number" && t.filters.brightness >= -100 && t.filters.brightness <= 100 && (n += `:brightness(${t.filters.brightness})`), t.filters.fill && (t.filters.fill.match(/[0-9A-Fa-f]{6}/g) || t.filters.fill === "transparent") && (n += `:fill(${t.filters.fill})`), t.filters.format && ["webp", "png", "jpeg"].includes(t.filters.format) && (n += `:format(${t.filters.format})`), typeof t.filters.grayscale == "boolean" && t.filters.grayscale && (n += ":grayscale()"), typeof t.filters.quality == "number" && t.filters.quality >= 0 && t.filters.quality <= 100 && (n += `:quality(${t.filters.quality})`), t.filters.rotate && [90, 180, 270].includes(t.filters.rotate) && (n += `:rotate(${t.filters.rotate})`), n.length > 0 && (n = "/filters" + n))), i.length > 0 && (e = e.replace(/<img/g, `<img ${i.trim()}`));
    const c = s > 0 || a > 0 || n.length > 0 ? `${s}x${a}${n}` : "";
    return e = e.replace(
      /a.storyblok.com\/f\/(\d+)\/([^.]+)\.(gif|jpg|jpeg|png|tif|tiff|bmp)/g,
      `a.storyblok.com/f/$1/$2.$3/m/${c}`
    ), typeof t != "boolean" && (t.sizes || t.srcset) && (e = e.replace(/<img.*?src=["|'](.*?)["|']/g, (o) => {
      var d, b;
      const g = o.match(
        /a.storyblok.com\/f\/(\d+)\/([^.]+)\.(gif|jpg|jpeg|png|tif|tiff|bmp)/g
      );
      if (g && g.length > 0) {
        const f = {
          srcset: (d = t.srcset) == null ? void 0 : d.map((l) => {
            if (typeof l == "number")
              return `//${g}/m/${l}x0${n} ${l}w`;
            if (typeof l == "object" && l.length === 2) {
              let h = 0, y = 0;
              return typeof l[0] == "number" && (h = l[0]), typeof l[1] == "number" && (y = l[1]), `//${g}/m/${h}x${y}${n} ${h}w`;
            }
          }).join(", "),
          sizes: (b = t.sizes) == null ? void 0 : b.map((l) => l).join(", ")
        };
        let u = "";
        return f.srcset && (u += `srcset="${f.srcset}" `), f.sizes && (u += `sizes="${f.sizes}" `), o.replace(/<img/g, `<img ${u.trim()}`);
      }
      return o;
    })), e;
  }
  renderNode(e) {
    const t = [];
    e.marks && e.marks.forEach((a) => {
      const i = this.getMatchingMark(a);
      i && t.push(this.renderOpeningTag(i.tag));
    });
    const s = this.getMatchingNode(e);
    return s && s.tag && t.push(this.renderOpeningTag(s.tag)), e.content ? e.content.forEach((a) => {
      t.push(this.renderNode(a));
    }) : e.text ? t.push(P(e.text)) : s && s.singleTag ? t.push(this.renderTag(s.singleTag, " /")) : s && s.html ? t.push(s.html) : e.type === "emoji" && t.push(this.renderEmoji(e)), s && s.tag && t.push(this.renderClosingTag(s.tag)), e.marks && e.marks.slice(0).reverse().forEach((a) => {
      const i = this.getMatchingMark(a);
      i && t.push(this.renderClosingTag(i.tag));
    }), t.join("");
  }
  renderTag(e, t) {
    return e.constructor === String ? `<${e}${t}>` : e.map((a) => {
      if (a.constructor === String)
        return `<${a}${t}>`;
      {
        let i = `<${a.tag}`;
        if (a.attrs)
          for (const n in a.attrs) {
            const c = a.attrs[n];
            c !== null && (i += ` ${n}="${c}"`);
          }
        return `${i}${t}>`;
      }
    }).join("");
  }
  renderOpeningTag(e) {
    return this.renderTag(e, "");
  }
  renderClosingTag(e) {
    return e.constructor === String ? `</${e}>` : e.slice(0).reverse().map((s) => s.constructor === String ? `</${s}>` : `</${s.tag}>`).join("");
  }
  getMatchingNode(e) {
    const t = this.nodes[e.type];
    if (typeof t == "function")
      return t(e);
  }
  getMatchingMark(e) {
    const t = this.marks[e.type];
    if (typeof t == "function")
      return t(e);
  }
  renderEmoji(e) {
    if (e.attrs.emoji)
      return e.attrs.emoji;
    const t = [
      {
        tag: "img",
        attrs: {
          src: e.attrs.fallbackImage,
          draggable: "false",
          loading: "lazy",
          align: "absmiddle"
        }
      }
    ];
    return this.renderTag(t, " /");
  }
}
export {
  V as default
};
