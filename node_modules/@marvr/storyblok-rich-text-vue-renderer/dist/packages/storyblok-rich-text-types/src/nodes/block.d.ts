import { Node, TopLevelNode, TextNode, NodeAttributes } from '.';
import { Block } from '../enum';
export interface BlockNode extends Node {
}
export interface BlockNodeWithContent extends BlockNode {
    content: BlockNode[];
}
export interface DocumentNode extends BlockNodeWithContent {
    type: Block.DOCUMENT;
    content: TopLevelNode[];
}
export declare type HeadingLevels = 1 | 2 | 3 | 4 | 5 | 6;
export interface HeadingAttributes extends NodeAttributes {
    level: HeadingLevels;
}
export interface HeadingNode extends BlockNodeWithContent {
    type: Block.HEADING;
    attrs: HeadingAttributes;
    content: TextNode[];
}
export interface ParagraphNode extends BlockNodeWithContent {
    type: Block.PARAGRAPH;
    content: TextNode[];
}
export interface ListItemNode extends BlockNodeWithContent {
    type: Block.LIST_ITEM;
    content: ParagraphNode[];
}
export interface ListAttributes extends NodeAttributes {
}
export interface ListNode extends BlockNodeWithContent {
    type: Block.OL_LIST | Block.UL_LIST;
    attrs?: ListAttributes;
    content: ListItemNode[];
}
export interface OrderedListAttributes extends ListAttributes {
    order: number;
}
export interface OrderedListNode extends ListNode {
    type: Block.OL_LIST;
    attrs: OrderedListAttributes;
}
export interface UnorderedListNode extends ListNode {
    type: Block.UL_LIST;
}
export interface QuoteNode extends BlockNodeWithContent {
    type: Block.QUOTE;
    content: ParagraphNode[];
}
export interface CodeAttributes extends NodeAttributes {
    class: string;
}
export interface CodeBlockNode extends BlockNodeWithContent {
    type: Block.CODE;
    attrs: CodeAttributes;
    content: TextNode[];
}
export interface HrNode extends BlockNode {
    type: Block.HR;
}
export interface BrNode extends BlockNode {
    type: Block.BR;
}
export interface ImageAttributes extends NodeAttributes {
    alt: string;
    src: string;
    title: string | null;
}
export interface ImageNode extends BlockNode {
    type: Block.IMAGE;
    attrs: ImageAttributes;
}
export declare type VoidBlockNodes = HrNode | BrNode | ImageNode;
//# sourceMappingURL=block.d.ts.map