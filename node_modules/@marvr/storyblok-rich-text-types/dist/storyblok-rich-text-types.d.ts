
export declare enum Block {
    DOCUMENT = "doc",
    HEADING = "heading",
    PARAGRAPH = "paragraph",
    QUOTE = "blockquote",
    OL_LIST = "ordered_list",
    UL_LIST = "bullet_list",
    LIST_ITEM = "list_item",
    CODE = "code_block",
    HR = "horizontal_rule",
    BR = "hard_break",
    IMAGE = "image"
}

export declare interface BlockNode extends Node_2 {
}

export declare interface BlockNodeWithContent extends BlockNode {
    content: BlockNode[];
}

export declare interface BoldNode extends MarkNode {
    type: Mark.BOLD;
}

export declare interface BrNode extends BlockNode {
    type: Block.BR;
}

export declare interface CodeAttributes extends NodeAttributes {
    class: string;
}

export declare interface CodeBlockNode extends BlockNodeWithContent {
    type: Block.CODE;
    attrs: CodeAttributes;
    content: TextNode[];
}

export declare interface CodeNode extends MarkNode {
    type: Mark.CODE;
}

export declare interface ComponentAttributes {
    id: string;
    body: ComponentBody[];
}

export declare interface ComponentBody extends ComponentBodyCover {
    _uid: string;
    component: string;
}

declare interface ComponentBodyCover {
    [key: string]: any;
}

export declare interface ComponentNode extends Node_2 {
    type: ComponentType;
    attrs: ComponentAttributes;
}

export declare const ComponentType = "blok";

export declare type ComponentType = typeof ComponentType;

export declare interface DocumentNode extends BlockNodeWithContent {
    type: Block.DOCUMENT;
    content: TopLevelNode[];
}

export declare interface HeadingAttributes extends NodeAttributes {
    level: HeadingLevels;
}

export declare type HeadingLevels = 1 | 2 | 3 | 4 | 5 | 6;

export declare interface HeadingNode extends BlockNodeWithContent {
    type: Block.HEADING;
    attrs: HeadingAttributes;
    content: TextNode[];
}

export declare interface HrNode extends BlockNode {
    type: Block.HR;
}

export declare interface ImageAttributes extends NodeAttributes {
    alt: string;
    src: string;
    title: string | null;
}

export declare interface ImageNode extends BlockNode {
    type: Block.IMAGE;
    attrs: ImageAttributes;
}

export declare interface ItalicNode extends MarkNode {
    type: Mark.ITALIC;
}

export declare interface LinkAttributes {
    href: string;
    uuid: string | null;
    target: LinkTarget;
    linktype: LinkType;
}

export declare interface LinkNode extends MarkNode {
    type: Mark.LINK;
    attrs: LinkAttributes;
}

export declare type LinkTarget = '_self' | '_blank' | null;

export declare type LinkType = 'url' | 'story' | 'asset' | 'email';

export declare interface ListAttributes extends NodeAttributes {
}

export declare interface ListItemNode extends BlockNodeWithContent {
    type: Block.LIST_ITEM;
    content: ParagraphNode[];
}

export declare interface ListNode extends BlockNodeWithContent {
    type: Block.OL_LIST | Block.UL_LIST;
    attrs?: ListAttributes;
    content: ListItemNode[];
}

export declare enum Mark {
    BOLD = "bold",
    STRONG = "strong",
    STRIKE = "strike",
    UNDERLINE = "underline",
    ITALIC = "italic",
    CODE = "code",
    LINK = "link",
    STYLED = "styled"
}

export declare interface MarkNode extends Node_2 {
}

declare interface Node_2 {
    readonly type: Block | Mark | ComponentType | TextType;
    attrs?: NodeAttributes;
}
export { Node_2 as Node }

export declare interface NodeAttributes {
}

export declare interface OrderedListAttributes extends ListAttributes {
    order: number;
}

export declare interface OrderedListNode extends ListNode {
    type: Block.OL_LIST;
    attrs: OrderedListAttributes;
}

export declare interface ParagraphNode extends BlockNodeWithContent {
    type: Block.PARAGRAPH;
    content: TextNode[];
}

export declare interface QuoteNode extends BlockNodeWithContent {
    type: Block.QUOTE;
    content: ParagraphNode[];
}

export declare interface StrikeNode extends MarkNode {
    type: Mark.STRIKE;
}

export declare interface StrongNode extends MarkNode {
    type: Mark.STRONG;
}

export declare interface StyledAttributes {
    class: string;
}

export declare interface StyledNode extends MarkNode {
    type: Mark.STYLED;
    attrs: StyledAttributes;
}

export declare interface TextNode extends Node_2 {
    type: TextType;
    text: string;
    marks?: MarkNode[];
}

export declare const TextType = "text";

export declare type TextType = typeof TextType;

export declare type TopLevelNode = HeadingNode | ParagraphNode | OrderedListNode | UnorderedListNode | QuoteNode | CodeBlockNode | HrNode | ImageNode | ComponentNode;

export declare interface UnderlineNode extends MarkNode {
    type: Mark.UNDERLINE;
}

export declare interface UnorderedListNode extends ListNode {
    type: Block.UL_LIST;
}

export declare type VoidBlockNodes = HrNode | BrNode | ImageNode;

export { }
